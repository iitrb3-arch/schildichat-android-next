name: Andishe2 One-Time Transform & Build (no-cache, fix build)

on:
  push:
    paths:
      - ".github/workflows/andishe2.yml"
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      APP_ID: "ir.edu97.andishe2"
      APP_NAME: "Andishe2"
      BRAND_FA: "دبستان اندیشه حسینی"
      HOMESERVER_URL: "https://edu97.ir"
      MARKER_FILE: ".andishe2_applied"
      FALLBACK_BRANCH: "andishe2-changes"
      ADMIN_ID: "@admin:edu97.ir"

    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Configure Git identity
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Stop if already applied
        run: |
          if [ -f "${MARKER_FILE}" ]; then
            echo "Changes already applied. Exiting."
            exit 0
          fi

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: "17"

      - name: Install Android SDK (CLI tools)
        uses: android-actions/setup-android@v3

      - name: Install required Android packages
        shell: bash
        run: |
          set -euo pipefail
          yes | sdkmanager --licenses
          sdkmanager "platforms;android-34" "build-tools;34.0.0" "platform-tools"

      - name: Write transform script
        shell: bash
        run: |
          set -euo pipefail
          cat > andishe2.sh <<'BASH'
          set -euo pipefail
          echo "Detect modules…"
          mapfile -t MODULES < <(git ls-files | grep -E 'src/main/AndroidManifest.xml$' | sed 's#/src/main/AndroidManifest.xml##' | sort -u)
          echo "Modules: ${MODULES[*]}"

          echo "Enforce minSdk=23 targetSdk=34…"
          for f in $(git ls-files | grep -E '^(.*)/build.gradle(.kts)?$'); do
            sed -E -i \
              -e 's/(minSdk\s*=?\s*)[0-9]+/\123/g' \
              -e 's/(minSdkVersion\s*=?\s*)[0-9]+/\123/g' \
              -e 's/(targetSdk\s*=?\s*)[0-9]+/\134/g' \
              -e 's/(targetSdkVersion\s*=?\s*)[0-9]+/\134/g' \
              "$f" || true
          done

          echo "Enable shrink/proguard on release…"
          for f in $(git ls-files | grep -E '^.*app.*/build.gradle(.kts)?$'); do
            if ! grep -q "buildTypes" "$f"; then
              cat >> "$f" <<'EOF'
          android {
            buildTypes {
              release {
                minifyEnabled true
                shrinkResources true
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
              }
            }
            packagingOptions {
              resources {
                excludes += ['META-INF/*']
              }
            }
            compileOptions {
              sourceCompatibility JavaVersion.VERSION_17
              targetCompatibility JavaVersion.VERSION_17
            }
          }
          EOF
            else
              sed -i -E "s/release\s*\\{[^}]*\\}/release { minifyEnabled true\nshrinkResources true\nproguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro' }/g" "$f" || true
            fi
          done

          echo "Set applicationId & app_name…"
          for f in $(git ls-files | grep -E '^.*app.*/build.gradle(.kts)?$'); do
            if grep -q 'applicationId' "$f"; then
              sed -E -i "s#applicationId\\s+\"[^\"]+\"#applicationId \"${APP_ID}\"#g" "$f"
            else
              sed -E -i "s#(defaultConfig\\s*\\{)#\\1\n        applicationId \"${APP_ID}\"#g" "$f" || true
            fi
          done
          for s in $(git ls-files | grep -E 'src/main/res/values.*/strings.xml$'); do
            sed -i 's#<string name="app_name">[^<]*</string>#<string name="app_name">'${APP_NAME}'</string>#g' "$s" || true
            sed -i "s#Element#${BRAND_FA}#g" "$s" || true
            sed -i "s#ELEMENT#${BRAND_FA}#g" "$s" || true
            sed -i "s#element#${BRAND_FA}#g" "$s" || true
          done

          echo "Locales fa/en only…"
          for m in "${MODULES[@]}"; do
            mkdir -p "$m/src/main/res/xml"
            cat > "$m/src/main/res/xml/locales_config.xml" <<EOF
          <locale-config xmlns:android="http://schemas.android.com/apk/res/android">
              <locale android:name="fa"/>
              <locale android:name="en"/>
          </locale-config>
          EOF
            MAN="$m/src/main/AndroidManifest.xml"
            if ! grep -q 'android:localeConfig' "$MAN"; then
              sed -i 's#<application #<application android:localeConfig="@xml/locales_config" #g' "$MAN"
            fi
          done
          for d in $(git ls-files | grep -E 'src/main/res/values-[a-zA-Z-]+' | sed 's#/[^/]*$##' | sort -u); do
            if [[ "$d" != *"/values-fa" && "$d" != *"/values-en" && "$d" != *"/values" ]]; then
              git rm -r -f "$d" || true
            fi
          done
          for m in "${MODULES[@]}"; do
            MAN="$m/src/main/AndroidManifest.xml"
            if ! grep -q 'android:supportsRtl' "$MAN"; then
              sed -i 's#<application #<application android:supportsRtl="true" #g' "$MAN"
            fi
          done

          echo "Hard-set homeserver ${HOMESERVER_URL} & strip UI (server picker / signup / forgot / invite / QR / support / feedback / legal)…"
          git ls-files | grep -E '\.kt$|\.java$|\.xml$' | while read -r f; do
            sed -i "s#https://matrix.org#${HOMESERVER_URL}#g" "$f" || true
            sed -i "s#https://.*\\.matrix\\.org#${HOMESERVER_URL}#g" "$f" || true
            sed -i "s#defaultHomeserver\" value=\"[^\"]*#defaultHomeserver\" value=\"${HOMESERVER_URL}#g" "$f" || true
          done
          for x in $(git ls-files | grep -E 'src/main/res/menu/.*\.xml$'); do
            sed -i -E '/invite|qr|support|feedback|bug|report|share|contact|friend|legal/d' "$x" || true
          done

          # Help/About to brand
          for s in $(git ls-files | grep -E 'src/main/res/values.*/strings.xml$'); do
            if grep -q '<string name="about">' "$s"; then
              sed -i 's#<string name="about">[^<]*</string>#<string name="about">'"${BRAND_FA}"'</string>#' "$s"
            else
              sed -i 's#</resources>#<string name="about">'"${BRAND_FA}"'</string>\n</resources>#' "$s"
            fi
            if grep -q '<string name="help">' "$s"; then
              sed -i 's#<string name="help">[^<]*</string>#<string name="help">'"${BRAND_FA}"'</string>#' "$s"
            else
              sed -i 's#</resources>#<string name="help">'"${BRAND_FA}"'</string>\n</resources>#' "$s"
            fi
          done

          echo "Admin-only note (implement check in app logic if needed)…"
          echo "Admin-only room/channel creation policy. Expected admin: ${ADMIN_ID}" > ADMIN_GATE_NOTE.txt

          echo "Mark applied and try commit to main…"
          echo "applied" > "${MARKER_FILE}"
          git add -A
          git commit -m "[skip ci] Andishe2: one-time transform (homeserver=${HOMESERVER_URL}, fa/en only, remove invites/qr/support, branding ${BRAND_FA}, minSdk=23, shrink)."

          if git push origin HEAD:main; then
            echo "::notice::Pushed to main"
          else
            echo "::warning::Push to main blocked (branch protection?). Creating branch & PR…"
            git checkout -b "${FALLBACK_BRANCH}"
            git push -u origin "${FALLBACK_BRANCH}"
            gh pr create --title "Andishe2 changes" --body "One-time transform ready. Merge to apply permanently." --base main --head "${FALLBACK_BRANCH}" || true
          fi
          BASH
          chmod +x andishe2.sh

      - name: Run transform
        run: ./andishe2.sh

      - name: Build release APK (robust)
        run: |
          set -euo pipefail
          chmod +x ./gradlew
          # سعی کن تسک عمومی و اگر نبود، اپ ماژول
          ./gradlew --no-daemon --stacktrace clean assembleRelease -x test -x lint || \
          ./gradlew --no-daemon --stacktrace clean :app:assembleRelease -x test -x lint
          APK=$(ls -1 **/build/outputs/apk/release/*.apk | head -n1)
          echo "apk_path=${APK}" >> $GITHUB_ENV
          echo "Built: ${APK}"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Andishe2
          path: ${{ env.apk_path }}
          if-no-files-found: error
          retention-days: 10

      - name: Create Release with APK
        uses: softprops/action-gh-release@v2
        with:
          name: "Andishe2 initial build"
          tag_name: "andishe2-v1"
          draft: false
          prerelease: false
          files: ${{ env.apk_path }}

      - name: Self-remove workflow (best-effort)
        run: |
          set -e
          ( git pull --rebase && git rm -f .github/workflows/andishe2.yml && git commit -m "[skip ci] Andishe2: remove one-time workflow" && git push origin HEAD:main ) || true
